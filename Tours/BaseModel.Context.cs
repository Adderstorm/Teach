//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Tours
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class CollegeNLEntities : DbContext
    {
        private static CollegeNLEntities _context;
        public CollegeNLEntities()
            : base("name=CollegeNLEntities")
        {
        }
        public static CollegeNLEntities GetContext()
        {
            if(_context == null)
                _context = new CollegeNLEntities();
            return _context;
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Course> Course { get; set; }
        public virtual DbSet<ExpelledStudents> ExpelledStudents { get; set; }
        public virtual DbSet<Faculty> Faculty { get; set; }
        public virtual DbSet<Grade> Grade { get; set; }
        public virtual DbSet<Group> Group { get; set; }
        public virtual DbSet<RUP> RUP { get; set; }
        public virtual DbSet<Student> Student { get; set; }
        public virtual DbSet<Trainer> Trainer { get; set; }
        public virtual DbSet<AVGStudentGrade> AVGStudentGrade { get; set; }
        public virtual DbSet<AcademicLoad> AcademicLoad { get; set; }
        public virtual DbSet<AcademicLoad_SortByTerm_> AcademicLoad_SortByTerm_ { get; set; }
        public virtual DbSet<FStudents> FStudents { get; set; }
        public virtual DbSet<GroupAVGValue> GroupAVGValue { get; set; }
        public virtual DbSet<ListStudents> ListStudents { get; set; }
        public virtual DbSet<ListStudentsGrade> ListStudentsGrade { get; set; }
        public virtual DbSet<StudentRating> StudentRating { get; set; }
    
        public virtual int DelCourse(Nullable<int> courseID)
        {
            var courseIDParameter = courseID.HasValue ?
                new ObjectParameter("CourseID", courseID) :
                new ObjectParameter("CourseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DelCourse", courseIDParameter);
        }
    
        public virtual int DelFac(Nullable<int> facId)
        {
            var facIdParameter = facId.HasValue ?
                new ObjectParameter("FacId", facId) :
                new ObjectParameter("FacId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DelFac", facIdParameter);
        }
    
        public virtual int DelGroup(Nullable<int> groupID)
        {
            var groupIDParameter = groupID.HasValue ?
                new ObjectParameter("GroupID", groupID) :
                new ObjectParameter("GroupID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DelGroup", groupIDParameter);
        }
    
        public virtual int DelRUP(Nullable<int> rupID)
        {
            var rupIDParameter = rupID.HasValue ?
                new ObjectParameter("RupID", rupID) :
                new ObjectParameter("RupID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DelRUP", rupIDParameter);
        }
    
        public virtual int DelStud(Nullable<int> studentId)
        {
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DelStud", studentIdParameter);
        }
    
        public virtual int InsCourse(string courseTitle)
        {
            var courseTitleParameter = courseTitle != null ?
                new ObjectParameter("CourseTitle", courseTitle) :
                new ObjectParameter("CourseTitle", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsCourse", courseTitleParameter);
        }
    
        public virtual int InsFac(string facultyTitle)
        {
            var facultyTitleParameter = facultyTitle != null ?
                new ObjectParameter("FacultyTitle", facultyTitle) :
                new ObjectParameter("FacultyTitle", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsFac", facultyTitleParameter);
        }
    
        public virtual int InsGroup(string groupName, Nullable<int> facultyID)
        {
            var groupNameParameter = groupName != null ?
                new ObjectParameter("GroupName", groupName) :
                new ObjectParameter("GroupName", typeof(string));
    
            var facultyIDParameter = facultyID.HasValue ?
                new ObjectParameter("FacultyID", facultyID) :
                new ObjectParameter("FacultyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsGroup", groupNameParameter, facultyIDParameter);
        }
    
        public virtual int InsRup(string rupName, Nullable<int> facultyHour, string attestatinView, Nullable<int> trainerID, Nullable<int> term, Nullable<int> courseID, Nullable<int> facultyID)
        {
            var rupNameParameter = rupName != null ?
                new ObjectParameter("RupName", rupName) :
                new ObjectParameter("RupName", typeof(string));
    
            var facultyHourParameter = facultyHour.HasValue ?
                new ObjectParameter("FacultyHour", facultyHour) :
                new ObjectParameter("FacultyHour", typeof(int));
    
            var attestatinViewParameter = attestatinView != null ?
                new ObjectParameter("AttestatinView", attestatinView) :
                new ObjectParameter("AttestatinView", typeof(string));
    
            var trainerIDParameter = trainerID.HasValue ?
                new ObjectParameter("TrainerID", trainerID) :
                new ObjectParameter("TrainerID", typeof(int));
    
            var termParameter = term.HasValue ?
                new ObjectParameter("Term", term) :
                new ObjectParameter("Term", typeof(int));
    
            var courseIDParameter = courseID.HasValue ?
                new ObjectParameter("CourseID", courseID) :
                new ObjectParameter("CourseID", typeof(int));
    
            var facultyIDParameter = facultyID.HasValue ?
                new ObjectParameter("FacultyID", facultyID) :
                new ObjectParameter("FacultyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsRup", rupNameParameter, facultyHourParameter, attestatinViewParameter, trainerIDParameter, termParameter, courseIDParameter, facultyIDParameter);
        }
    
        public virtual int InsStud(string lastName, Nullable<int> groupID, string email, string phoneNum, Nullable<System.DateTime> birthday)
        {
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var groupIDParameter = groupID.HasValue ?
                new ObjectParameter("GroupID", groupID) :
                new ObjectParameter("GroupID", typeof(int));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var phoneNumParameter = phoneNum != null ?
                new ObjectParameter("PhoneNum", phoneNum) :
                new ObjectParameter("PhoneNum", typeof(string));
    
            var birthdayParameter = birthday.HasValue ?
                new ObjectParameter("Birthday", birthday) :
                new ObjectParameter("Birthday", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsStud", lastNameParameter, groupIDParameter, emailParameter, phoneNumParameter, birthdayParameter);
        }
    
        public virtual ObjectResult<RatingStud_Result> RatingStud(Nullable<int> courseID)
        {
            var courseIDParameter = courseID.HasValue ?
                new ObjectParameter("CourseID", courseID) :
                new ObjectParameter("CourseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RatingStud_Result>("RatingStud", courseIDParameter);
        }
    
        public virtual int UpdCourse(string courseTitle)
        {
            var courseTitleParameter = courseTitle != null ?
                new ObjectParameter("CourseTitle", courseTitle) :
                new ObjectParameter("CourseTitle", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdCourse", courseTitleParameter);
        }
    
        public virtual int UpdFac(string facultyTitle)
        {
            var facultyTitleParameter = facultyTitle != null ?
                new ObjectParameter("FacultyTitle", facultyTitle) :
                new ObjectParameter("FacultyTitle", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdFac", facultyTitleParameter);
        }
    
        public virtual int UpdGroup(string groupName, Nullable<int> facultyID)
        {
            var groupNameParameter = groupName != null ?
                new ObjectParameter("GroupName", groupName) :
                new ObjectParameter("GroupName", typeof(string));
    
            var facultyIDParameter = facultyID.HasValue ?
                new ObjectParameter("FacultyID", facultyID) :
                new ObjectParameter("FacultyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdGroup", groupNameParameter, facultyIDParameter);
        }
    
        public virtual int UpdRup(string rupName, Nullable<int> facultyHour, string attestatinView, Nullable<int> trainerID, Nullable<int> term, Nullable<int> courseID, Nullable<int> facultyID)
        {
            var rupNameParameter = rupName != null ?
                new ObjectParameter("RupName", rupName) :
                new ObjectParameter("RupName", typeof(string));
    
            var facultyHourParameter = facultyHour.HasValue ?
                new ObjectParameter("FacultyHour", facultyHour) :
                new ObjectParameter("FacultyHour", typeof(int));
    
            var attestatinViewParameter = attestatinView != null ?
                new ObjectParameter("AttestatinView", attestatinView) :
                new ObjectParameter("AttestatinView", typeof(string));
    
            var trainerIDParameter = trainerID.HasValue ?
                new ObjectParameter("TrainerID", trainerID) :
                new ObjectParameter("TrainerID", typeof(int));
    
            var termParameter = term.HasValue ?
                new ObjectParameter("Term", term) :
                new ObjectParameter("Term", typeof(int));
    
            var courseIDParameter = courseID.HasValue ?
                new ObjectParameter("CourseID", courseID) :
                new ObjectParameter("CourseID", typeof(int));
    
            var facultyIDParameter = facultyID.HasValue ?
                new ObjectParameter("FacultyID", facultyID) :
                new ObjectParameter("FacultyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdRup", rupNameParameter, facultyHourParameter, attestatinViewParameter, trainerIDParameter, termParameter, courseIDParameter, facultyIDParameter);
        }
    
        public virtual int UpdStud(string lastName, Nullable<int> groupID, string email, string phoneNum, Nullable<System.DateTime> birthday)
        {
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var groupIDParameter = groupID.HasValue ?
                new ObjectParameter("GroupID", groupID) :
                new ObjectParameter("GroupID", typeof(int));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var phoneNumParameter = phoneNum != null ?
                new ObjectParameter("PhoneNum", phoneNum) :
                new ObjectParameter("PhoneNum", typeof(string));
    
            var birthdayParameter = birthday.HasValue ?
                new ObjectParameter("Birthday", birthday) :
                new ObjectParameter("Birthday", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdStud", lastNameParameter, groupIDParameter, emailParameter, phoneNumParameter, birthdayParameter);
        }
    }
}
